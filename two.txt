
#include<evive.h>

//Included Libraries
#include <ESP8266.h>

//MACROS are defined here
#define SSID        "vinay"
#define PASSWORD    "00000000"
ESP8266 wifi(Serial3, 115200);
#define X_AIO_KEY   "aio_NRqK28jjGQLfURKek8oZ9kV3UIB1"
#define USERNAME    "RFL_VEX_WATER"

#define HOST_NAME   "io.adafruit.com"
#define HOST_PORT   (80)

byte statusLed    = 13;

byte sensorInterrupt = 0;  // 0 = digital pin 2
byte sensorPin       = 2;

// The hall-effect flow sensor outputs approximately 4.5 pulses per second per
// litre/minute of flow.
float calibrationFactor = 4.5;

volatile byte pulseCount;  

float flowRate;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres;

unsigned long oldTime,sendTime;

void setup()
{
  
  // Initialize a serial connection for reporting values to the host
  Serial.begin(9600);
  tft_init(INITR_GREENTAB);
  tft.setRotation(1);
  tft.fillScreen(ST7735_BLACK);
  tft.setTextColor(ST7735_RED);
  tft.setTextSize(1);
  tft.setCursor(20,15);
  wifi.setOprToStation();
  wifi.connectWiFi(SSID, PASSWORD);
  
  // Set up the status LED line as an output
  pinMode(statusLed, OUTPUT);
  digitalWrite(statusLed, HIGH);  // We have an active-low LED attached
  
  pinMode(sensorPin, INPUT);
  digitalWrite(sensorPin, HIGH);

  pulseCount        = 0;
  flowRate          = 0.0;
  flowMilliLitres   = 0;
  totalMilliLitres  = 0;
  oldTime           = 0;
  sendTime	    = 0;

  // The Hall-effect sensor is connected to pin 2 which uses interrupt 0.
  // Configured to trigger on a FALLING state change (transition from HIGH
  // state to LOW state)
  attachInterrupt(sensorInterrupt, pulseCounter, FALLING);
}

void loop()
{

   if((millis() - oldTime) > 1000)    // Only process counters once per second
  { 
    // Disable the interrupt while calculating flow rate and sending the value to
    // the host
    detachInterrupt(sensorInterrupt);
        
    // Because this loop may not complete in exactly 1 second intervals we calculate
    // the number of milliseconds that have passed since the last execution and use
    // that to scale the output. We also apply the calibrationFactor to scale the output
    // based on the number of pulses per second per units of measure (litres/minute in
    // this case) coming from the sensor.
    flowRate = ((1000.0 / (millis() - oldTime)) * pulseCount) / calibrationFactor;
    
    // Note the time this processing pass was executed. Note that because we've
    // disabled interrupts the millis() function won't actually be incrementing right
    // at this point, but it will still return the value it was set to just before
    // interrupts went away.
    oldTime = millis();
    
    // Divide the flow rate in litres/minute by 60 to determine how many litres have
    // passed through the sensor in this 1 second interval, then multiply by 1000 to
    // convert to millilitres.
    flowMilliLitres = (flowRate / 60)*1000;
    
    // Add the millilitres passed in this second to the cumulative total
    totalMilliLitres += flowMilliLitres;
    unsigned int frac;
    
    // Print the flow rate for this second in litres / minute
    Serial.print("Flow rate of Line 1: ");
    tft.setTextColor(ST7735_WHITE);
    tft.setTextSize(1);
    tft.setCursor(5,10);
   
    Serial.print(int(flowRate));  // Print the integer part of the variable
    tft.print("Flow rate of Line 1:");
    tft.setTextColor(ST7735_GREEN,ST7735_BLACK);
    tft.setTextSize(1);
    tft.setCursor(5,25);
    tft.print(float(flowRate));
/*    tft.print(".");
    
    Serial.print(".");   
    // Print the decimal point
    // Determine the fractional part. The 10 multiplier gives us 1 decimal place.
    frac = (flowRate - int(flowRate)) * 10;
    Serial.print(frac, DEC) ;      // Print the fractional part of the variable
    tft.print(frac, DEC); */
    Serial.print("L/min");
    tft.print("L/min");
    // Print the number of litres flowed in this second
     
    Serial.print("  Current Liquid Flowing: ");             // Output separator
    Serial.print(flowMilliLitres);
    Serial.print(" mL/Sec ");

    tft.setTextColor(ST7735_WHITE);
    tft.setTextSize(1);
    tft.setCursor(15,65);
    tft.println("Current Liquid Flowing:");
  
    tft.setTextColor(ST7735_GREEN,ST7735_BLACK);
    tft.setTextSize(1);
    tft.setCursor(15,80);
    tft.print(flowMilliLitres);
    tft.print(" mL/Sec ");


    // Print the cumulative total of litres flowed since starting
    Serial.print("  Output Liquid Quantity: ");             // Output separator
    Serial.print(totalMilliLitres);
    Serial.println("mL"); 
    tft.setTextColor(ST7735_WHITE);
    tft.setTextSize(1);
    tft.setCursor(15,95);
    tft.println("Output Liquid Quantity:");
    tft.setTextColor(ST7735_GREEN,ST7735_BLACK);
    tft.setTextSize(1);
    tft.setCursor(15,110);
    tft.print(totalMilliLitres);
    tft.print("  mL  ");
    
    // Reset the pulse counter so we can start incrementing again
    pulseCount = 0;
    // Enable the interrupt again now that we've finished sending output
    attachInterrupt(sensorInterrupt, pulseCounter, FALLING);
  }

	if((millis() - sendTime) > 6000)
	{
	detachInterrupt(sensorInterrupt);

	wifi.sendAdafruitIO_NUMBER(flowRate, X_AIO_KEY, USERNAME, "bmc-water.line1flow", 200, HOST_NAME, HOST_PORT);

	wifi.sendAdafruitIO_NUMBER(totalMilliLitres, X_AIO_KEY, USERNAME, "bmc-water.line1usage", 200, HOST_NAME, HOST_PORT);

	sendTime = millis();

	attachInterrupt(sensorInterrupt, pulseCounter, FALLING);

	}
}

void pulseCounter()
{
  // Increment the pulse counter
  pulseCount++;
}